auto_scale_lr = dict(base_batch_size=16, enable=True)
backend_args = None
checkpoint = 'checkpoints/base_centerpoint_voxel01_second_secfpn_8xb4_cyclic_20e_nus_3d_known.pth'
class_names = [
    'car',
    'truck',
    'trailer',
    'bus',
    'construction_vehicle',
    'bicycle',
    'motorcycle',
    'pedestrian',
    'traffic_cone',
    'barrier',
]
custom_hooks = []
data_prefix = dict(img='', pts='samples/LIDAR_TOP', sweeps='sweeps/LIDAR_TOP')
data_preprocessor = dict(
    type=
    'mmdet3d.models.data_preprocessors.data_preprocessor.Det3DDataPreprocessor',
    voxel=True,
    voxel_layer=dict(
        max_num_points=10,
        max_voxels=(
            90000,
            120000,
        ),
        point_cloud_range=[
            -51.2,
            -51.2,
            -5.0,
            51.2,
            51.2,
            3.0,
        ],
        voxel_size=[
            0.1,
            0.1,
            0.2,
        ]))
data_root = 'data/nuscenes/'
dataset_type = 'NuScenesDataset'
db_sampler = dict(
    backend_args=None,
    classes=[
        'car',
        'truck',
        'construction_vehicle',
        'bus',
        'trailer',
        'barrier',
        'motorcycle',
        'bicycle',
        'pedestrian',
        'traffic_cone',
    ],
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
        use_dim=[
            0,
            1,
            2,
            3,
            4,
        ]),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ],
        filter_by_min_points=dict(
            barrier=5,
            bicycle=5,
            bus=5,
            car=5,
            construction_vehicle=5,
            motorcycle=5,
            pedestrian=5,
            traffic_cone=5,
            trailer=5,
            truck=5)),
    rate=1.0,
    sample_groups=dict(
        barrier=2,
        bicycle=6,
        bus=4,
        car=2,
        construction_vehicle=7,
        motorcycle=6,
        pedestrian=2,
        traffic_cone=2,
        trailer=6,
        truck=3))
default_hooks = dict(
    checkpoint=dict(
        interval=1, type='mmengine.hooks.checkpoint_hook.CheckpointHook'),
    logger=dict(interval=50, type='mmengine.hooks.logger_hook.LoggerHook'),
    param_scheduler=dict(
        type='mmengine.hooks.param_scheduler_hook.ParamSchedulerHook'),
    sampler_seed=dict(
        type='mmengine.hooks.sampler_seed_hook.DistSamplerSeedHook'),
    timer=dict(type='mmengine.hooks.iter_timer_hook.IterTimerHook'),
    visualization=dict(
        type='mmdet3d.engine.hooks.visualization_hook.Det3DVisualizationHook'))
default_scope = 'mmdet3d'
detector = dict(
    pts_backbone=dict(
        conv_cfg=dict(bias=False, type='torch.nn.modules.conv.Conv2d'),
        in_channels=256,
        layer_nums=[
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
        out_channels=[
            128,
            256,
        ],
        type='mmdet3d.models.backbones.second.SECOND'),
    pts_bbox_head=dict(
        bbox_coder=dict(
            code_size=9,
            max_num=500,
            out_size_factor=8,
            pc_range=[
                -51.2,
                -51.2,
            ],
            post_center_range=[
                -61.2,
                -61.2,
                -10.0,
                61.2,
                61.2,
                10.0,
            ],
            score_threshold=0.1,
            type=
            'mmood3d.models.task_modules.coders.centerpoint_bbox_coders.CustomCenterPointBBoxCoder',
            voxel_size=[
                0.1,
                0.1,
            ]),
        common_heads=dict(
            dim=(
                3,
                2,
            ),
            height=(
                1,
                2,
            ),
            reg=(
                2,
                2,
            ),
            rot=(
                2,
                2,
            ),
            vel=(
                2,
                2,
            )),
        in_channels=512,
        loss_bbox=dict(
            loss_weight=0.25, reduction='mean', type='mmdet.L1Loss'),
        loss_cls=dict(reduction='mean', type='mmdet.GaussianFocalLoss'),
        norm_bbox=True,
        separate_head=dict(
            final_kernel=3,
            init_bias=-2.19,
            type='mmdet3d.models.dense_heads.centerpoint_head.SeparateHead'),
        share_conv_channel=64,
        tasks=[
            dict(class_names=[
                'car',
            ], num_class=1),
            dict(class_names=[
                'truck',
                'construction_vehicle',
            ], num_class=2),
            dict(class_names=[
                'bus',
                'trailer',
            ], num_class=2),
            dict(class_names=[
                'barrier',
            ], num_class=1),
            dict(class_names=[
                'motorcycle',
                'bicycle',
            ], num_class=2),
            dict(class_names=[
                'pedestrian',
                'traffic_cone',
            ], num_class=2),
        ],
        type='mmood3d.models.dense_heads.centerpoint_head.CustomCenterHead'),
    pts_middle_encoder=dict(
        block_type='basicblock',
        encoder_channels=(
            (
                16,
                16,
                32,
            ),
            (
                32,
                32,
                64,
            ),
            (
                64,
                64,
                128,
            ),
            (
                128,
                128,
            ),
        ),
        encoder_paddings=(
            (
                0,
                0,
                1,
            ),
            (
                0,
                0,
                1,
            ),
            (
                0,
                0,
                [
                    0,
                    1,
                    1,
                ],
            ),
            (
                0,
                0,
            ),
        ),
        in_channels=5,
        order=(
            'conv',
            'norm',
            'act',
        ),
        output_channels=128,
        return_middle_feats=True,
        sparse_shape=[
            41,
            1024,
            1024,
        ],
        type='mmdet3d.models.middle_encoders.sparse_encoder.SparseEncoder'),
    pts_neck=dict(
        in_channels=[
            128,
            256,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
        out_channels=[
            256,
            256,
        ],
        type='mmdet3d.models.necks.second_fpn.SECONDFPN',
        upsample_cfg=dict(bias=False, type='deconv'),
        upsample_strides=[
            1,
            2,
        ],
        use_conv_for_no_stride=True),
    pts_voxel_encoder=dict(
        num_features=5,
        type='mmdet3d.models.voxel_encoders.voxel_encoder.HardSimpleVFE'),
    test_cfg=dict(
        pts=dict(
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[
                4,
                12,
                10,
                1,
                0.85,
                0.175,
            ],
            nms_thr=0.2,
            nms_type='rotate',
            out_size_factor=8,
            pc_range=[
                -51.2,
                -51.2,
            ],
            post_center_limit_range=[
                -61.2,
                -61.2,
                -10.0,
                61.2,
                61.2,
                10.0,
            ],
            post_max_size=83,
            pre_max_size=1000,
            score_threshold=0.1,
            voxel_size=[
                0.1,
                0.1,
            ])),
    train_cfg=dict(
        pts=dict(
            code_weights=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.2,
                0.2,
            ],
            dense_reg=1,
            gaussian_overlap=0.1,
            grid_size=[
                1024,
                1024,
                40,
            ],
            max_objs=500,
            min_radius=2,
            out_size_factor=8,
            point_cloud_range=[
                -51.2,
                -51.2,
                -5.0,
                51.2,
                51.2,
                3.0,
            ],
            voxel_size=[
                0.1,
                0.1,
                0.2,
            ])),
    type='mmood3d.models.detectors.ood_centerpoint.OODCenterPoint')
detector_test_cfg = dict(
    pts=dict(
        max_per_img=500,
        max_pool_nms=False,
        min_radius=[
            4,
            12,
            10,
            1,
            0.85,
            0.175,
        ],
        nms_thr=0.2,
        nms_type='rotate',
        out_size_factor=8,
        pc_range=[
            -51.2,
            -51.2,
        ],
        post_center_limit_range=[
            -61.2,
            -61.2,
            -10.0,
            61.2,
            61.2,
            10.0,
        ],
        post_max_size=83,
        pre_max_size=1000,
        score_threshold=0.1,
        voxel_size=[
            0.1,
            0.1,
        ]))
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
eval_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        sweeps_num=10,
        test_mode=True,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromMultiSweeps'),
    dict(
        keys=[
            'points',
        ],
        type='mmdet3d.datasets.transforms.formating.Pack3DDetInputs'),
]
input_modality = dict(use_camera=False, use_lidar=True)
known_classes = (
    'car',
    'truck',
    'construction_vehicle',
    'bus',
    'trailer',
    'barrier',
    'motorcycle',
    'bicycle',
    'pedestrian',
    'traffic_cone',
)
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(
    by_epoch=True,
    type='mmengine.runner.log_processor.LogProcessor',
    window_size=50)
lr = 0.001
metainfo = dict(
    classes=(
        'car',
        'truck',
        'construction_vehicle',
        'bus',
        'trailer',
        'barrier',
        'motorcycle',
        'bicycle',
        'pedestrian',
        'traffic_cone',
    ),
    unknown_classes=(
        'animal',
        'debris',
        'pushable_pullable',
        'personal_mobility',
        'stroller',
        'wheelchair',
        'bicycle_rack',
        'ambulance_vehicle',
        'police_vehicle',
    ))
model = dict(
    base_detector=dict(
        pts_backbone=dict(
            conv_cfg=dict(bias=False, type='torch.nn.modules.conv.Conv2d'),
            in_channels=256,
            layer_nums=[
                5,
                5,
            ],
            layer_strides=[
                1,
                2,
            ],
            norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
            out_channels=[
                128,
                256,
            ],
            type='mmdet3d.models.backbones.second.SECOND'),
        pts_bbox_head=dict(
            bbox_coder=dict(
                code_size=9,
                max_num=500,
                out_size_factor=8,
                pc_range=[
                    -51.2,
                    -51.2,
                ],
                post_center_range=[
                    -61.2,
                    -61.2,
                    -10.0,
                    61.2,
                    61.2,
                    10.0,
                ],
                score_threshold=0.1,
                type=
                'mmood3d.models.task_modules.coders.centerpoint_bbox_coders.CustomCenterPointBBoxCoder',
                voxel_size=[
                    0.1,
                    0.1,
                ]),
            common_heads=dict(
                dim=(
                    3,
                    2,
                ),
                height=(
                    1,
                    2,
                ),
                reg=(
                    2,
                    2,
                ),
                rot=(
                    2,
                    2,
                ),
                vel=(
                    2,
                    2,
                )),
            in_channels=512,
            loss_bbox=dict(
                loss_weight=0.25, reduction='mean', type='mmdet.L1Loss'),
            loss_cls=dict(reduction='mean', type='mmdet.GaussianFocalLoss'),
            norm_bbox=True,
            separate_head=dict(
                final_kernel=3,
                init_bias=-2.19,
                type='mmdet3d.models.dense_heads.centerpoint_head.SeparateHead'
            ),
            share_conv_channel=64,
            tasks=[
                dict(class_names=[
                    'car',
                ], num_class=1),
                dict(
                    class_names=[
                        'truck',
                        'construction_vehicle',
                    ],
                    num_class=2),
                dict(class_names=[
                    'bus',
                    'trailer',
                ], num_class=2),
                dict(class_names=[
                    'barrier',
                ], num_class=1),
                dict(class_names=[
                    'motorcycle',
                    'bicycle',
                ], num_class=2),
                dict(
                    class_names=[
                        'pedestrian',
                        'traffic_cone',
                    ], num_class=2),
            ],
            type='mmood3d.models.dense_heads.centerpoint_head.CustomCenterHead'
        ),
        pts_middle_encoder=dict(
            block_type='basicblock',
            encoder_channels=(
                (
                    16,
                    16,
                    32,
                ),
                (
                    32,
                    32,
                    64,
                ),
                (
                    64,
                    64,
                    128,
                ),
                (
                    128,
                    128,
                ),
            ),
            encoder_paddings=(
                (
                    0,
                    0,
                    1,
                ),
                (
                    0,
                    0,
                    1,
                ),
                (
                    0,
                    0,
                    [
                        0,
                        1,
                        1,
                    ],
                ),
                (
                    0,
                    0,
                ),
            ),
            in_channels=5,
            order=(
                'conv',
                'norm',
                'act',
            ),
            output_channels=128,
            return_middle_feats=True,
            sparse_shape=[
                41,
                1024,
                1024,
            ],
            type='mmdet3d.models.middle_encoders.sparse_encoder.SparseEncoder'
        ),
        pts_neck=dict(
            in_channels=[
                128,
                256,
            ],
            norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
            out_channels=[
                256,
                256,
            ],
            type='mmdet3d.models.necks.second_fpn.SECONDFPN',
            upsample_cfg=dict(bias=False, type='deconv'),
            upsample_strides=[
                1,
                2,
            ],
            use_conv_for_no_stride=True),
        pts_voxel_encoder=dict(
            num_features=5,
            type='mmdet3d.models.voxel_encoders.voxel_encoder.HardSimpleVFE'),
        test_cfg=dict(
            pts=dict(
                max_per_img=500,
                max_pool_nms=False,
                min_radius=[
                    4,
                    12,
                    10,
                    1,
                    0.85,
                    0.175,
                ],
                nms_thr=0.2,
                nms_type='rotate',
                out_size_factor=8,
                pc_range=[
                    -51.2,
                    -51.2,
                ],
                post_center_limit_range=[
                    -61.2,
                    -61.2,
                    -10.0,
                    61.2,
                    61.2,
                    10.0,
                ],
                post_max_size=83,
                pre_max_size=1000,
                score_threshold=0.1,
                voxel_size=[
                    0.1,
                    0.1,
                ])),
        train_cfg=dict(
            pts=dict(
                code_weights=[
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    0.2,
                    0.2,
                ],
                dense_reg=1,
                gaussian_overlap=0.1,
                grid_size=[
                    1024,
                    1024,
                    40,
                ],
                max_objs=500,
                min_radius=2,
                out_size_factor=8,
                point_cloud_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                voxel_size=[
                    0.1,
                    0.1,
                    0.2,
                ])),
        type='mmood3d.models.detectors.ood_centerpoint.OODCenterPoint'),
    base_detector_ckpt=
    'checkpoints/base_centerpoint_voxel01_second_secfpn_8xb4_cyclic_20e_nus_3d_known.pth',
    data_preprocessor=dict(
        type=
        'mmdet3d.models.data_preprocessors.data_preprocessor.Det3DDataPreprocessor',
        voxel=True,
        voxel_layer=dict(
            max_num_points=10,
            max_voxels=(
                90000,
                120000,
            ),
            point_cloud_range=[
                -51.2,
                -51.2,
                -5.0,
                51.2,
                51.2,
                3.0,
            ],
            voxel_size=[
                0.1,
                0.1,
                0.2,
            ])),
    ood_head=dict(
        feature_map='neck_feats',
        loss_ood=dict(
            loss_weight=1.0,
            reduction='mean',
            type='mmdet.models.losses.cross_entropy_loss.CrossEntropyLoss',
            use_sigmoid=True),
        roi_extractor=dict(
            aggregation='concat',
            featmap_strides=[
                8,
            ],
            out_channels=512,
            roi_layer=dict(
                num_points=1,
                pc_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                type=
                'mmood3d.models.ood_heads.roi_extractors.bev_point_extractor.BEVPooling',
                voxel_size=[
                    0.1,
                    0.1,
                    0.2,
                ]),
            type=
            'mmdet.models.roi_heads.roi_extractors.generic_roi_extractor.GenericRoIExtractor'
        ),
        type='mmood3d.models.ood_heads.ood_head.OODHead',
        with_box_features=True,
        with_class_scores=True),
    test_cfg=dict(
        pts=dict(
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[
                4,
                12,
                10,
                1,
                0.85,
                0.175,
            ],
            nms_thr=0.2,
            nms_type='rotate',
            out_size_factor=8,
            pc_range=[
                -51.2,
                -51.2,
            ],
            post_center_limit_range=[
                -61.2,
                -61.2,
                -10.0,
                61.2,
                61.2,
                10.0,
            ],
            post_max_size=83,
            pre_max_size=1000,
            score_threshold=0.1,
            voxel_size=[
                0.1,
                0.1,
            ])),
    train_cfg=dict(
        pts=dict(
            code_weights=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.2,
                0.2,
            ],
            dense_reg=1,
            gaussian_overlap=0.1,
            grid_size=[
                1024,
                1024,
                40,
            ],
            max_objs=500,
            min_radius=2,
            out_size_factor=8,
            point_cloud_range=[
                -51.2,
                -51.2,
                -5.0,
                51.2,
                51.2,
                3.0,
            ],
            voxel_size=[
                0.1,
                0.1,
                0.2,
            ])),
    type='mmood3d.models.ood_detectors.ood_detector.OODDetector')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.001,
        momentum=0.9,
        type='torch.optim.sgd.SGD',
        weight_decay=0.0001),
    type='mmengine.optim.optimizer.amp_optimizer_wrapper.AmpOptimWrapper')
param_scheduler = dict(
    begin=0,
    by_epoch=True,
    convert_to_iter_based=True,
    end=5,
    eta_min=1e-06,
    power=3,
    type='mmengine.optim.scheduler.lr_scheduler.PolyLR')
point_cloud_range = [
    -51.2,
    -51.2,
    -5.0,
    51.2,
    51.2,
    3.0,
]
randomness = dict(deterministic=True, seed=1473819345)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            img='', pts='samples/LIDAR_TOP', sweeps='sweeps/LIDAR_TOP'),
        data_root='data/nuscenes/',
        filter_unknowns=False,
        metainfo=dict(
            classes=(
                'car',
                'truck',
                'construction_vehicle',
                'bus',
                'trailer',
                'barrier',
                'motorcycle',
                'bicycle',
                'pedestrian',
                'traffic_cone',
                'animal',
                'debris',
                'pushable_pullable',
                'personal_mobility',
                'stroller',
                'wheelchair',
                'bicycle_rack',
                'ambulance_vehicle',
                'police_vehicle',
            ),
            unknown_classes=(
                'animal',
                'debris',
                'pushable_pullable',
                'personal_mobility',
                'stroller',
                'wheelchair',
                'bicycle_rack',
                'ambulance_vehicle',
                'police_vehicle',
            )),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=9,
                test_mode=True,
                type=
                'mmdet3d.datasets.transforms.loading.LoadPointsFromMultiSweeps',
                use_dim=[
                    0,
                    1,
                    2,
                    3,
                    4,
                ]),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        point_cloud_range=[
                            -51.2,
                            -51.2,
                            -5.0,
                            51.2,
                            51.2,
                            3.0,
                        ],
                        type=
                        'mmdet3d.datasets.transforms.transforms_3d.PointsRangeFilter'
                    ),
                ],
                type=
                'mmdet3d.datasets.transforms.test_time_aug.MultiScaleFlipAug3D'
            ),
            dict(
                keys=[
                    'points',
                ],
                type='mmood3d.datasets.transforms.formating.Pack3DDetInputs'),
        ],
        test_mode=True,
        type='mmood3d.datasets.NuScenesOODDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(
        shuffle=False, type='mmengine.dataset.sampler.DefaultSampler'))
test_evaluator = [
    dict(
        assigner=dict(
            coord_inds=[
                0,
                1,
            ],
            max_dist_thr=0.5,
            norm=2,
            type=
            'mmood3d.models.task_modules.assigners.min_dist_assigner.MinDistanceAssigner'
        ),
        baselines=[
            dict(type='mmood3d.models.ood_processors.ood_processors.MSP'),
            dict(type='mmood3d.models.ood_processors.ood_processors.MaxLogit'),
            dict(type='mmood3d.models.ood_processors.ood_processors.ODIN'),
            dict(type='mmood3d.models.ood_processors.ood_processors.Energy'),
        ],
        known_classes=(
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ),
        matching='assigner',
        prefix='Assigner',
        type='mmood3d.evaluation.metrics.ood_metric.OODMetric',
        unknown_classes=(
            'animal',
            'debris',
            'pushable_pullable',
            'personal_mobility',
            'stroller',
            'wheelchair',
            'bicycle_rack',
            'ambulance_vehicle',
            'police_vehicle',
        )),
]
test_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        pad_empty_sweeps=True,
        remove_close=True,
        sweeps_num=9,
        test_mode=True,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromMultiSweeps',
        use_dim=[
            0,
            1,
            2,
            3,
            4,
        ]),
    dict(
        flip=False,
        img_scale=(
            1333,
            800,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                point_cloud_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                type=
                'mmdet3d.datasets.transforms.transforms_3d.PointsRangeFilter'),
        ],
        type='mmdet3d.datasets.transforms.test_time_aug.MultiScaleFlipAug3D'),
    dict(
        keys=[
            'points',
        ],
        type='mmood3d.datasets.transforms.formating.Pack3DDetInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=5, val_interval=1)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_train.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            img='', pts='samples/LIDAR_TOP', sweeps='sweeps/LIDAR_TOP'),
        data_root='data/nuscenes/',
        filter_unknowns=True,
        metainfo=dict(
            classes=(
                'car',
                'truck',
                'construction_vehicle',
                'bus',
                'trailer',
                'barrier',
                'motorcycle',
                'bicycle',
                'pedestrian',
                'traffic_cone',
            ),
            unknown_classes=(
                'animal',
                'debris',
                'pushable_pullable',
                'personal_mobility',
                'stroller',
                'wheelchair',
                'bicycle_rack',
                'ambulance_vehicle',
                'police_vehicle',
            )),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=9,
                type=
                'mmdet3d.datasets.transforms.loading.LoadPointsFromMultiSweeps',
                use_dim=[
                    0,
                    1,
                    2,
                    3,
                    4,
                ]),
            dict(
                type='mmdet3d.datasets.transforms.loading.LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                rot_range=[
                    -0.3925,
                    0.3925,
                ],
                scale_ratio_range=[
                    0.95,
                    1.05,
                ],
                translation_std=[
                    0,
                    0,
                    0,
                ],
                type=
                'mmdet3d.datasets.transforms.transforms_3d.GlobalRotScaleTrans'
            ),
            dict(
                flip_ratio_bev_horizontal=0.5,
                flip_ratio_bev_vertical=0.5,
                sync_2d=False,
                type='mmdet3d.datasets.transforms.transforms_3d.RandomFlip3D'),
            dict(
                point_cloud_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                type=
                'mmdet3d.datasets.transforms.transforms_3d.PointsRangeFilter'),
            dict(
                point_cloud_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                type=
                'mmdet3d.datasets.transforms.transforms_3d.ObjectRangeFilter'),
            dict(
                classes=(
                    'car',
                    'truck',
                    'construction_vehicle',
                    'bus',
                    'trailer',
                    'barrier',
                    'motorcycle',
                    'bicycle',
                    'pedestrian',
                    'traffic_cone',
                ),
                type=
                'mmdet3d.datasets.transforms.transforms_3d.ObjectNameFilter'),
            dict(
                equal_scaling=False,
                large_scale_range=[
                    1.5,
                    3.0,
                ],
                small_prob=0.8,
                small_scale_range=[
                    0.1,
                    0.5,
                ],
                type='mmood3d.datasets.transforms.transforms_3d.OODScaleSample',
                unknown_label=10),
            dict(
                type='mmdet3d.datasets.transforms.transforms_3d.PointShuffle'),
            dict(
                keys=[
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                    'gt_orig_labels_3d',
                ],
                type=
                'mmood3d.datasets.transforms.formating.CustomPack3DDetInputs'),
        ],
        test_mode=False,
        type='mmood3d.datasets.ood_nuscenes_dataset.NuScenesOODDataset',
        use_valid_flag=True),
    num_workers=0,
    persistent_workers=False,
    sampler=dict(shuffle=True, type='mmengine.dataset.sampler.DefaultSampler'))
train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        pad_empty_sweeps=True,
        remove_close=True,
        sweeps_num=9,
        type='mmdet3d.datasets.transforms.loading.LoadPointsFromMultiSweeps',
        use_dim=[
            0,
            1,
            2,
            3,
            4,
        ]),
    dict(
        type='mmdet3d.datasets.transforms.loading.LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True),
    dict(
        rot_range=[
            -0.3925,
            0.3925,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        translation_std=[
            0,
            0,
            0,
        ],
        type='mmdet3d.datasets.transforms.transforms_3d.GlobalRotScaleTrans'),
    dict(
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5,
        sync_2d=False,
        type='mmdet3d.datasets.transforms.transforms_3d.RandomFlip3D'),
    dict(
        point_cloud_range=[
            -51.2,
            -51.2,
            -5.0,
            51.2,
            51.2,
            3.0,
        ],
        type='mmdet3d.datasets.transforms.transforms_3d.PointsRangeFilter'),
    dict(
        point_cloud_range=[
            -51.2,
            -51.2,
            -5.0,
            51.2,
            51.2,
            3.0,
        ],
        type='mmdet3d.datasets.transforms.transforms_3d.ObjectRangeFilter'),
    dict(
        classes=(
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ),
        type='mmdet3d.datasets.transforms.transforms_3d.ObjectNameFilter'),
    dict(
        equal_scaling=False,
        large_scale_range=[
            1.5,
            3.0,
        ],
        small_prob=0.8,
        small_scale_range=[
            0.1,
            0.5,
        ],
        type='mmood3d.datasets.transforms.transforms_3d.OODScaleSample',
        unknown_label=10),
    dict(type='mmdet3d.datasets.transforms.transforms_3d.PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
            'gt_orig_labels_3d',
        ],
        type='mmood3d.datasets.transforms.formating.CustomPack3DDetInputs'),
]
unknown_classes = (
    'animal',
    'debris',
    'pushable_pullable',
    'personal_mobility',
    'stroller',
    'wheelchair',
    'bicycle_rack',
    'ambulance_vehicle',
    'police_vehicle',
)
val_cfg = dict()
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            img='', pts='samples/LIDAR_TOP', sweeps='sweeps/LIDAR_TOP'),
        data_root='data/nuscenes/',
        filter_unknowns=False,
        metainfo=dict(
            classes=(
                'car',
                'truck',
                'construction_vehicle',
                'bus',
                'trailer',
                'barrier',
                'motorcycle',
                'bicycle',
                'pedestrian',
                'traffic_cone',
                'animal',
                'debris',
                'pushable_pullable',
                'personal_mobility',
                'stroller',
                'wheelchair',
                'bicycle_rack',
                'ambulance_vehicle',
                'police_vehicle',
            ),
            unknown_classes=(
                'animal',
                'debris',
                'pushable_pullable',
                'personal_mobility',
                'stroller',
                'wheelchair',
                'bicycle_rack',
                'ambulance_vehicle',
                'police_vehicle',
            )),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='mmdet3d.datasets.transforms.loading.LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=9,
                test_mode=True,
                type=
                'mmdet3d.datasets.transforms.loading.LoadPointsFromMultiSweeps',
                use_dim=[
                    0,
                    1,
                    2,
                    3,
                    4,
                ]),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        point_cloud_range=[
                            -51.2,
                            -51.2,
                            -5.0,
                            51.2,
                            51.2,
                            3.0,
                        ],
                        type=
                        'mmdet3d.datasets.transforms.transforms_3d.PointsRangeFilter'
                    ),
                ],
                type=
                'mmdet3d.datasets.transforms.test_time_aug.MultiScaleFlipAug3D'
            ),
            dict(
                keys=[
                    'points',
                ],
                type='mmood3d.datasets.transforms.formating.Pack3DDetInputs'),
        ],
        test_mode=True,
        type='mmood3d.datasets.NuScenesOODDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(
        shuffle=False, type='mmengine.dataset.sampler.DefaultSampler'))
val_evaluator = [
    dict(
        assigner=dict(
            coord_inds=[
                0,
                1,
            ],
            max_dist_thr=0.5,
            norm=2,
            type=
            'mmood3d.models.task_modules.assigners.min_dist_assigner.MinDistanceAssigner'
        ),
        baselines=[
            dict(type='mmood3d.models.ood_processors.ood_processors.MSP'),
            dict(type='mmood3d.models.ood_processors.ood_processors.MaxLogit'),
            dict(type='mmood3d.models.ood_processors.ood_processors.ODIN'),
            dict(type='mmood3d.models.ood_processors.ood_processors.Energy'),
        ],
        known_classes=(
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ),
        matching='assigner',
        prefix='Assigner',
        type='mmood3d.evaluation.metrics.ood_metric.OODMetric',
        unknown_classes=(
            'animal',
            'debris',
            'pushable_pullable',
            'personal_mobility',
            'stroller',
            'wheelchair',
            'bicycle_rack',
            'ambulance_vehicle',
            'police_vehicle',
        )),
]
vis_backends = [
    dict(type='mmengine.visualization.vis_backend.LocalVisBackend'),
    dict(type='mmengine.visualization.TensorboardVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='mmdet3d.visualization.local_visualizer.Det3DLocalVisualizer',
    vis_backends=[
        dict(type='mmengine.visualization.vis_backend.LocalVisBackend'),
        dict(type='mmengine.visualization.TensorboardVisBackend'),
    ])
voxel_size = [
    0.1,
    0.1,
    0.2,
]
work_dir = './Paper_Results/ood'
